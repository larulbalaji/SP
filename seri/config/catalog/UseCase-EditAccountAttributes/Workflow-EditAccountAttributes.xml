<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="Edit Account Attributes"
  type="SERI">
  <Variable initializer="string:true" name="transient">
    <Description>Set to false to cause workflow-related objects, such as
      approval
      work items, to be saved in the database even if they are only
      viewed by the person registering.</Description>
  </Variable>
  <Variable input="true" name="batchRequestItemId">
    <Description>Used by the batch interface to record back individual
      request item status. The specific item id for the individual
      request in the batch file.</Description>
  </Variable>
  <Variable editable="true" name="optimisticProvisioning"
    initializer="string:false">
    <Description>Set to true to enable optimistic provisioning. This
      will cause
      changes to the entitlements compiled from role assignments to be
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.</Description>
  </Variable>
  <Variable editable="true" initializer="string:false"
    name="foregroundProvisioning">
    <Description>Normally provisioning is done in a step that uses the
      "backgroud"
      option to force the workfow to be suspend and be resumed in a
      background task thread. This prevents the browser session from
      hanging since provision can sometimes take a long time. For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to
      the
      user. This prevents having to run the Perform Maintanance task to
      see the resutls of the request.</Description>
  </Variable>
  <Variable editable="true" initializer="string:true" name="doRefresh">
    <Description>Set to true to cause an identity refresh after the
      changes in the plan
      have been provisioned. This is normally off, you might want this on
      if you want modification of identity or link attributes to result in
      an immediate re-evaluation of assigned and detected roles.</Description>
  </Variable>
  <Variable initializer="string:Normal" input="true"
    name="workItemPriority">
    <Description>The String version of a WorkItem.Priority. This
      variable is
      used to set the priority on all of the workitems generated
      as part of this workflow and also set on the IdentityRequest
      object.</Description>
  </Variable>
  <Variable initializer="string:manager" input="true"
    name="notificationScheme">
    <Description>A string that specifies who should be notified when the
      request has been complete.
      The value can be null or a csv of one or more of the following options.

      none or null
      disable notifications

      user
      Identity that is registering will be notified.

      manager
      The manager of the Identity that is being updated will be notified.

      securityOfficer
      The identity named in the variable securityOfficerName will be notified.</Description>
  </Variable>

  <Variable initializer="string:serial" input="true" name="approvalMode">
    <Description>A string that specifies how we should handle the
      approvals.

      By default this is serial since most of these request with
      the exception of manager transfers will have only one approver.

      parallel
      Approvals are processed concurrently and there must be consensus,
      we wait for all approvers to approve. The first approver that
      rejects terminates the entire approval.

      parallelPoll
      Approvals are processed concurrently but consensus is not required.
      All approvals will be process, we don't stop if there any
      rejections.

      serial
      Approvals are processed one at a time and there must be consensus.
      The first approver that rejects terminates the entire approval.

      serialPoll
      Approvals are processed in order but consensus is not required.
      All approvals will be processed, we don't stop if there are any
      rejections. In effect we are "taking a poll" of the approvers.

      any
      Approvals are processed concurrently, the first approver to
      respond makes the decision for the group.</Description>
  </Variable>
  <Variable initializer="string:securityOfficer" input="true"
    name="approvalScheme">
    <Description>A csv string that specifies how approvals should be
      generated for
      the incoming request.

      The value can be any of the values below, combined together but
      are always processed in this order:

      1. manager
      2. securityOfficer

      Any rejected items from previous approvals will be omitted from the
      next phase of approvers.

      none - disabled approvals

      manager - The manager will get all approvals

      securityOfficer - The identity named in the variable securityOfficerName.</Description>
  </Variable>
  <Variable initializer="string:LCM Registration Approval"
    input="true" name="approvalEmailTemplate">
    <Description>The email template to use for approval notifications.</Description>
  </Variable>
  <Variable input="true" name="securityOfficerName">
    <Description>The name of the identity that will be sent approvals
      during security officer approvals.</Description>
  </Variable>
  <Variable initializer="string:spadmin" input="true"
    name="fallbackApprover">
    <Description>A String that specifies the name of the Identity that
      will
      be assigned any approvals where the owner of the approver
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.</Description>
  </Variable>
  <Variable initializer="string:continue" input="true" name="policyScheme">
    <Description>A String that specifies how policy checks effect the
      overall
      process.

      none - disabled policy checking

      fail - fail and exit the workflow if any policy violations are found

      continue - continue if policy violations are found</Description>
  </Variable>
  <Variable input="true" name="ticketManagementApplication">
    <Description>Name of the application that can handle ticket
      requests.
      When non-null the Manage Ticket Steps will be visited to open
      tickets during the workflow lifecycle.</Description>
  </Variable>
  <Variable input="true" name="policiesToCheck">
    <Description>A List of policies that should be checked. If this list
      is
      empty all violations will be checked. Used in combination
      with policyScheme.</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate
      where the request originated. Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="string:true" name="trace">
    <Description>Used for debugging this workflow and when set to true
      trace
      will be sent to stdout.</Description>
  </Variable>
  <Variable input="true" name="approverElectronicSignature">
    <Description>The name of the electronic signature object that should
      be used when workitems
      are completed by the approver.</Description>
  </Variable>
  <Variable name="identityDisplayName">
    <Description>The displayName of the identity being updated.</Description>
  </Variable>
  <Variable name="confirmationForm">
    <Description>A form that gets displayed for confirming the
      registration.</Description>
  </Variable>
  <Variable name="plan">
    <Description>The ProvisioningPlan that gets generated from the form
      input.</Description>
  </Variable>
  <Variable name="flow" initializer="string:Edit Attributes">
    <Description>The ProvisioningPlan that gets generated from the form
      input.</Description>
  </Variable>
  <Variable name="ticketId">
    <Description>The id of the ticket that is genereated by the
      ticketingManagementApplication.
      This is typically generated on the "open" call, and then used in
      subsequent
      calls. It is also stored on the IdentityRequest object under the
      externalTicketId variable.</Description>
  </Variable>
  <Variable name="policyViolations">
    <Description>List of policy violations that were found during our
      initial policy scan.
      This list is passed into each work item so the approvers can see
      pending violations.</Description>
  </Variable>
  <Variable name="workItemForm" />
  <Variable name="selectedLink" />
  <Variable name="selectedApp" />
  <Variable name="modelName" />
  <Variable name="attrForm" />
  <Variable name="formName" />
  <Variable name="linkModel" type="java.util.Map"/>
  <Variable name="identityName" input="true">
    <Description>The name of the identity we using.</Description>
  </Variable>

  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Approval Library" />
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library" />
  </RuleLibraries>

  <Step icon="Start" name="Start" posX="34" posY="26">
    <Transition to="Get User ID" />
  </Step>
  <Step icon="Default" name="Get User ID" posX="113" posY="25">
    <Script>
      <Source><![CDATA[
import sailpoint.object.*;

// Expect: java.lang.String quickLinkIdentityId

//Quicklinks User Select passes in the Identity ID rather than the identityName
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.EditAccountAttributes.GetUserId");
serilog.debug("EditAccountAttributes :: Got User Id = " + quickLinkIdentityId);
Identity aUser = context.getObjectById(Identity.class, quickLinkIdentityId);
serilog.debug("EditAccountAttributes :: User Id resolves to " + aUser.getName());
workflow.put("identityName", aUser.getName());

]]></Source>
    </Script>
    <Transition to="Select Link" />
  </Step>



  <Step name="Select Link">
    <Approval name="Select Link" owner="ref:requester"
      return="selectedLink,selectedApp">
      <Arg name="workItemType" value="string:Form" />
      <Arg name="workItemDescription" value="string:Select Link to Edit" />
      <Arg name="workItemForm" value="string:Form - EditAccountAttributes" />
      <Arg name="identityName" value="ref:identityName" />
    </Approval>
    <Transition to="Get Identity LinkModel" />
  </Step>

  <Step icon="Default" name="Get Identity LinkModel" posX="528"
    posY="192">
    <Script>
      <Source><![CDATA[
                import sailpoint.tools.MapUtil;
                import java.util.Iterator;
                import sailpoint.object.Application;
                import sailpoint.object.Identity;
                import sailpoint.api.IdentityService;
                import sailpoint.object.Link;
                import sailpoint.tools.MapUtil;
                import sailpoint.transformer.LinkTransformer;


                //This step allows us to check the identityModel it also sets the modelName attribute for use in
                //selecting which application we will use
                serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.EditAccountAttributes.GetIdentityLinkModel");

                Identity identity = context.getObjectByName(Identity.class,identityName);
                Application app = context.getObjectByName(Application.class,selectedApp);
                serilog.debug("EditAccountAttributes :: GetIdentityLinkModel :: selectedApp = " + selectedApp);
                serilog.debug("EditAccountAttributes :: GetIdentityLinkModel :: selectedLink = " + selectedLink);

                IdentityService identityService = new IdentityService(context);
                Link link = identityService.getLink(identity,app,null,selectedLink);
                serilog.debug("EditAccountAttributes :: GetIdentityLinkModel :: Found Link with IdentityService = " + link.getId());

                //String modelName = "identityModel.links[\&quot;" + selectedApp + "\&quot;]";
                //serilog.debug("modelName = " + modelName);
                //workflow.put("modelName",modelName);


                LinkTransformer transformer = new LinkTransformer(context);
                Map linkModel = transformer.toMap(link);
                serilog.debug("EditAccountAttributes :: GetIdentityLinkModel :: linkModel = " + linkModel);
                workflow.put("linkModel",linkModel);

            ]]></Source>
    </Script>
    <Transition to="Build Attribute Form" />
  </Step>



  <Step icon="Default" name="Build Attribute Form" posX="298" posY="89"
    resultVariable="attrForm">
    <Script>
      <Source><![CDATA[
import sailpoint.object.Attributes;
import sailpoint.object.Link;
import sailpoint.object.Identity;
import sailpoint.api.IdentityService;
import sailpoint.object.Field;
import sailpoint.object.Form;
import sailpoint.object.Form.Button;
import sailpoint.object.Form.Section;
import sailpoint.object.Application;
import sailpoint.object.Schema;
import sailpoint.object.Script;
import sailpoint.object.DynamicValue;
import java.util.Collection;
import java.util.HashSet;
import sailpoint.tools.MapUtil;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.EditAccountAttributes.BuildAttributeForm");

Form frm=new Form();
frm.put("pageTitle", "Edit Attributes");

Application app = context.getObjectByName(Application.class, selectedApp);
frm.setName("Form - Edit " + app.getName() + " Attributes");
workflow.put("formName",frm.getName());
serilog.debug("EditAccountAttributes :: BuildAttributeForm :: FormName = " + frm.getName());


Identity identity = context.getObjectByName(Identity.class,identityName);

IdentityService identityService = new IdentityService(context);
serilog.debug("EditAccountAttributes :: BuildAttributeForm :: Link Selected = " + selectedLink);
Link link = identityService.getLink(identity,app,null,selectedLink);
serilog.debug("EditAccountAttributes :: BuildAttributeForm :: Found Link Selected with IdentityService = " + link.getId());

//Not sure if we need to do this,but was having issues with forms
Form oldForm = context.getObjectByName(Form.class,frm.getName());
if (oldForm != null) {

context.removeObject(oldForm);
context.commitTransaction();
}


//Default next and cancel buttons
List buttons=new ArrayList();
buttons.add(new Button("Next", "next"));
buttons.add(new Button("Cancel", "cancel"));
frm.setButtons(buttons);

Section sect=new Section();


//Create a checkbox for Showing Blank Attributes

Field emptyField = new Field();
emptyField.setType("boolean");
emptyField.setName("showEmpty");
emptyField.setDisplayName("Show Empty Attributes");
emptyField.setDynamic(true);
emptyField.setValue(false);
emptyField.setPostBack(true);
sect.add(emptyField);


//Get the Schema List of the Application
Schema schema = app.getAccountSchema();
List schemaList=schema.getAttributeNames();
List schemaListArray = new ArrayList(schemaList);
serilog.debug("EditAccountAttributes :: BuildAttributeForm :: schemaList = " + schemaList);

//Now get the attributes from the IdentityModel.   Compare that to what is in the schemaList
//Similar will have those attributes that match
//Different has those that are different
Attributes atts = link.getAttributes();
Collection similar = atts.keySet();
Collection different = schemaListArray;
similar.retainAll(schemaListArray);
different.removeAll(similar);
serilog.debug("BuildAttributeForm :: similar = " + similar);
serilog.debug("BuildAttributeForm :: different = " + different);

String idAttrib = schema.getIdentityAttribute();
serilog.debug("EditAccountAttributes :: BuildAttributeForm :: idAttribute = " + idAttrib);

String displayAttrib = schema.getDisplayAttribute();
serilog.debug("EditAccountAttributes :: BuildAttributeForm :: displayAttribute = " + displayAttrib);

// Put identityAttribute and displayAttribute first.
// Make identityAttribute readOnly

Field idAttribField = new Field();
idAttribField.setType("string");
idAttribField.setName(idAttrib);
idAttribField.setDisplayName(idAttrib);
idAttribField.setReadOnly(true);
idAttribField.setHelpKey("This is the identity Attribute and is unchangeable in this form");
idAttribField.setValue(link.getNativeIdentity());
sect.add(idAttribField);

Field displayAttribField = new Field();
displayAttribField.setType("string");
displayAttribField.setName(displayAttrib);
displayAttribField.setDisplayName(displayAttrib);
displayAttribField.setValue(link.getDisplayableName());
displayAttribField.setHelpKey("This is the display Attribute");
sect.add(displayAttribField);


//Iterate through the schemaList and create fields for each one
for (String attr: schemaList ) {
// *password* causes token error, so lets remove it
// Also ignore identityAttribute and displayAttribute since we already added them
if (! ((attr.contains("*")) || (attr.equals(idAttrib)) || (attr.equals(displayAttrib))) ) {

//Default attributes
Field f=new Field();
f.setType("string");
f.setName(attr);
f.setDisplayName(attr);



AttributeDefinition def = schema.getAttributeDefinition(attr);


//If the attr is the group attr, then set the type to managedattribute and
//create a filter
if (def.isEntitlement()) {
f.setType("ManagedAttribute");
f.setFilterString("application.name == \"" + selectedApp + "\"");
}

/******************************************************************************/
// Removed this capability.   All attributes except identityAttribute are editable
/******************************************************************************/
//Sets the readOnly attribute to be dynamic and based upon the earlier checkbox

//DynamicValue dv = new DynamicValue();
//Script s = new Script();
//s.setSource(" if (!editAttributes) { return true; } else { return false; }");
//dv.setScript(s);
//f.setReadOnlyDefinition(dv);
//f.setValue(false);

//Process the different collection attributes to set them to hidden, similar will be displayed
if (different.contains(attr)) {
DynamicValue edv = new DynamicValue();
Script es = new Script();
f.setHidden(true);
es.setSource(" if (!showEmpty) { return true; } else { return false; }");
edv.setScript(es);
f.setHiddenDefinition(edv);


f.setDependencies("showEmpty");
} else {
//These are the values in similar collection
f.setHidden(false);
}

//If the attr is multiValued, then set it to multi
if (schema.isMultiValued(attr)) {

f.setMultiValued(true);
}   else {
f.setMultiValued(false);
}

//Object value = link.getAttribute(attr);

//if (value != null) {
//f.setValue(link.getAttribute(attr));
//linkModel.put(attr,value);
//serilog.debug("BBuildAttributeForm :: getAttribute = " + value.toString());
//}

//finally add this field to the section
sect.add(f);
}
}

//Add the section to the form
frm.add(sect);
serilog.trace("EditAccountAttributes :: BuildAttributeForm :: Form = " + frm.toXml());

//Save the form object.
context.saveObject(frm);
context.commitTransaction();

return frm;
          ]]></Source>
    </Script>
    <Transition to="Edit Attributes" />
  </Step>



  <Step icon="Approval" name="Edit Attributes" posX="373" posY="186">
    <Approval name="Edit Attributes" owner="script:return launcher;"
      return="linkModel" send="launcher,linkModel">
      <Arg name="workItemType" value="string:Form" />
      <Arg name="workItemDescription" value="string:Edit Account Attributes" />
      <Arg name="workItemForm" value="ref:formName" />
      <Arg name="modelBasePath" value="string:linkModel" />
      <Arg name="workItemFormBasePath" value="string:linkModel" />
      <AfterScript>
        <Source><![CDATA[
                    import sailpoint.object.Form.FieldIterator;
                    import sailpoint.object.Form;
                    import sailpoint.object.Field; 

                    serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.EditAccountAttributes.EditAttributes");
                    serilog.debug("EditAccountAttributes :: EditAttributes :: AfterScript :: LinkModel After Edit = " + linkModel);


                ]]></Source>
      </AfterScript>
    </Approval>
    <Description>Display the UI attributes to the user to see which
      attributes
      to display on the Identity cube's 'attributes' tab
    </Description>

    <Transition to="Build Provisioning Plan" />
  </Step>




  <Step name="Build Provisioning Plan" posX="898" posY="25"
    resultVariable="plan">

    <Description>Convert the registration request into a provisioning
      plan.</Description>
    <Script>
      <Source><![CDATA[
        import sailpoint.transformer.LinkTransformer;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.Identity;

        serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.EditAccountAttributes.BuildProvisioningPlan");
        LinkTransformer transformer = new LinkTransformer(context);
        serilog.debug("BuildProvisioningPlan :: Created Link Transformer");


        ProvisioningPlan plan = transformer.mapToPlan(linkModel, null);

        //Need to modify the plan slightly since we are only dealing with a link
        //Identity identity =
        context.getObjectByName(Identity.class,identityName);
        //plan.setIdentity(identity);
        serilog.debug("EditAccountAttributes :: BuildProvisioningPlan ::" + plan.toXml());

        return plan;

      ]]></Source>
    </Script>
    <Transition to="Submit LCM Provisioning" />
  </Step>

  <Step icon="Task" name="Submit LCM Provisioning" posX="1060"
    posY="25">
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="identityDisplayName" />
    <Arg name="plan" value="ref:plan" />
    <Arg name="flow" value="ref:flow" />
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning" />
    <Arg name="foregroundProvisioning" value="string:true" />
    <Arg name="doRefresh" />
    <Arg name="securityOfficerName" />
    <Arg name="notificationScheme" />
    <Arg name="approvalMode" />
    <Arg name="approvalScheme" value="string:none" />
    <Arg name="fallbackApprover" />
    <Arg name="approverElectronicSignature" />
    <Arg name="approvalEmailTemplate" />
    <Arg name="userEmailTemplate" />
    <Arg name="managerEmailTemplate" />
    <Arg name="securityOfficerEmailTemplate" />
    <Arg name="policyScheme" />
    <Arg name="policiesToCheck" />
    <Arg name="priority" />
    <Arg name="ticketManagementApplication" />
    <Arg name="source" />
    <Arg name="trace" />
    <Description>Call the LCM Create and Update workflow with the plan
      that was created.</Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Provisioning" />
    </WorkflowRef>
    <Transition to="end" />
  </Step>


  <Step icon="Stop" name="end" posX="648" posY="267" />
</Workflow>
