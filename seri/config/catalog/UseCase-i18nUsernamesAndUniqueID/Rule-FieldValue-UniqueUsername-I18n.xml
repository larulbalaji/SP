<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Set Unique Username Field (I18n) in a Form" type="FieldValue">
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="I18n Library"/>
  </ReferencedRules>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
           The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
import sailpoint.connector.Connector;
import sailpoint.connector.ConnectorFactory;
import sailpoint.object.*;
import java.util.*;
    
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.FieldValue.UserName");


// variables firstname and lastname should already exist, because they are before this field in the form..
// Expect: java.lang.String firstname
// Expect: java.lang.String lastname

if(firstname==null) {
  serilog.debug("no first name: skipping rule");
  return null;
} else {
  serilog.debug("firstname="+firstname);
}

if(lastname==null) {
  serilog.debug("no last name: skipping rule");
  return null;
} else {
  serilog.debug("lastname="+lastname);
}

String myLastName=lastname;
String myFirstName=firstname;

// Handle lastnames with multiple parts, i.e. Van den Heuvel
myLastName = myLastName.replace(" ",".");

// Make sure the first letter is converted to lowercase for Fullname constructs and UniqueID contructs in multi-part last names.
// i.e. Van.den.Heuvel to van.den.Heuvel
if (myLastName.contains(".")) {
	String firstLetter = myLastName.substring(0,1).toLowerCase();
	String restLetters = myLastName.substring(1);
   myLastName = firstLetter + restLetters;
}	
serilog.debug("Lastname: " + myLastName);

// Naming convention for the Identity is: 
// firstname.lastname + add number if not unique
// See other options below for number of characters from first and last name

boolean unique=false;
boolean allLast=false;
boolean usesuffix=false;
int suffix=1;

// Interstring runs the name past the I18n rule

String firstChars=interString(myFirstName);
// Firstname (first 4 chars) -> special characters should get converted into ascii
//if(firstChars.length()>4) {
//  firstChars=firstChars.substring(0,4);
//}

String lastChars=interString(myLastName);
// Lastname (first 5 chars) -> special characters should get converted into ascii
//if(lastChars.length()>5) {
//  lastChars=lastChars.substring(0,5);
//}

String candidate=null;

while(!unique) {
  candidate=firstChars + "." + lastChars;
  if(!usesuffix) {
    usesuffix=true;
  } else {
    candidate+=(suffix++); // inc here, so will be bigger next iteration if required
  }
  
	serilog.debug("candidate Username: "+candidate);

  QueryOptions options = new QueryOptions();
	options.addFilter(Filter.eq("name",candidate));
	Iterator iter =  context.search(Identity.class, options);

	//
	// Do we have already have a cube with the same UniqueID?
	//
	if (iter.hasNext()) {
    serilog.debug("Found a match. Trying again..");
  } else {
    serilog.debug("Candidate is unique. Returning..");
    unique=true; 
    return candidate;
  }
}
 
 return candidate;

    ]]></Source>
</Rule>
