<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow  explicitTransitions="true" libraries="Identity" name="Identity Event Reverse Native Change" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event" transient="true">
    <Description>
      The IdentityChangeEvent.  It can be used to build
      the provisioning plan, but does not need to be
      persisted with the case, so marked as transient.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service method. </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the resutls of the request.
    </Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.
    </Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="identityRequestId" output="true">
    <Description>
       The sequence id of the Identity request object which is stored in 
       the name field of the identity request.
    </Description>
  </Variable>
  <Variable name="approvalSet">
    <Description>
       The variable used to hold the approval set generated from the
       native changes on the event.
    </Description>
  </Variable>
  <Variable initializer="true" name="provisionRejectedItems">
    <Description>
        Flag to indicate if actual provisioning to reverse te native
        change should take place OR if it should just print a plan to 
        stdout. Set this variable to true, if you want it to provision
        the rejected items, otherwise it'll just be printed to stdout. 
     </Description>
  </Variable>
  <Variable name="launcher">
    <Description>The name of the identity that launched the workfllow. In cases where workflows are launched by the system an alternate launcher name may be passed as as a variable.</Description>
  </Variable>
  <Variable initializer="Modify" name="operations">
    <Description>CSV list of operations that are part of the native change request, default to Modify but this will be recalculated in the "Build OP String" step.</Description>
  </Variable>
  <Variable initializer="Normal" input="true" name="workItemPriority">
    <Description>
       The String version of a WorkItem.Priority. This variable is 
       used to set the priority on all of the workitems generated 
       as part of this workflow and also set on the IdentityRequest
       object.
    </Description>
  </Variable>
  <Description>
  An example workflow that requires manager approval
  for all natively detected changes found by IdentityIQ.
  
  Any items rejected by the manager will be reversed and 
  provisioned.    
  </Description>

  <Variable initializer="/tmp/" name="argsFileLocation"/>
  <Variable name="plan"/>
  <Variable initializer="string:true" name="trace"/>
  <Variable initializer="string:false" name="inactive"/>

  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="NativeChangeRulesDisable"/>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library"/>
    <Reference class="sailpoint.object.Rule" name="genArgs"/>
  </RuleLibraries>

  <Step name="start">
    <Script>
      <Source>
  	    <![CDATA[ 
        import sailpoint.tools.Util;
        import sailpoint.object.Identity;

        System.out.println("======================== Start ======================");

        genArgs(wfcontext, argsFileLocation);


 	   ]]>	
     </Source>
    </Script>
    <Transition to="Initialize"/>
  </Step>


  <Step icon="Task" name="Initialize">
    <Arg name="flow" value="ref:flow"/>
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="policiesToCheck" value="ref:policiesToCheck"/>
    <Arg name="policyScheme" value="ref:policyScheme"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="trace" value="string:false"/>
    <Arg name="requireViolationReviewComments" value="string:false"/>
    <Arg name="allowRequestsWithViolations" value="string:true"/>
    <Arg name="enableRetryRequest" value="string:true"/>
    <Arg name="batchRequestItemId" value=""/>
    <Arg name="endOnProvisioningForms" value="string:true"/>
    <Arg name="endOnManualWorkItems" value="string:true"/>
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into 
       project and checking policy violations.
    </Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="approvalSet"/>
    <Return name="policyViolations" to="policyViolations"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="violationReviewDecision" to="violationReviewDecision"/>
    <Return merge="true" name="workItemComments" to="workItemComments"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow"  name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Provision"/>
  </Step>

  <Step icon="Task" name="Provision">
    <Arg name="approvalScheme" value=""/>
    <Arg name="approvalSet" value=""/>
    <Arg name="fallbackApprover" value="string:spadmin"/>
    <Arg name="foregroundProvisioning" value="string:true"/>
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Changes"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="policyViolations" value=""/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policyScheme" value="ref:policyScheme"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="trace" value="string:false"/>
    <Arg name="workItemComments" value="ref:workItemComments"/>
    <Description>
      Call the standard subprocess that will process the 
      approval decisisions and do provisioning.  This 
      includes calling any configured provisioning 
      connectors and building manual actions.
    </Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow"  name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="end"/>
  </Step>

  <Step catches="complete" icon="Task" name="Finalize">
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="batchRequestItemId" value=""/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="trace" value="string:false"/>
    <Description>
      Call the standard subprocess that can audit/finalize the request.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow"  name="Identity Request Finalize"/>
    </WorkflowRef>
  </Step>

  <Step icon="Stop" name="end">
	<Script>
		<Source>
			System.out.println("======================== END ======================");
		</Source>
	</Script>
  </Step>
</Workflow>
