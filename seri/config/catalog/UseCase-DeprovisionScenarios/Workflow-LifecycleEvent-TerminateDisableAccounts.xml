<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity" name="Lifecycle Event - Terminate Disable Accounts" type="IdentityLifecycle">
  <Variable input="true" name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan ready to execute.</Description>
  </Variable>
  <Variable input="true" name="flow">
    <Description>The name of the LCM flow that launched this workflow.

      This is one of these three values:
 
      AccountsRequest
      EntitlementsRequest
      RolesRequest</Description>
  </Variable>
  <Variable editable="true" initializer="string:false" name="optimisticProvisioning">
    <Description>Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.</Description>
  </Variable>
  <Variable editable="true" initializer="string:true" name="foregroundProvisioning">
    <Description>Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the resutls of the request.</Description>
  </Variable>
  <Variable initializer="string:Normal" input="true" name="workItemPriority">
    <Description>The String version of a WorkItem.Priority. This variable is 
       used to set the priority on all of the workitems generated 
       as part of this workflow and also set on the IdentityRequest
       object.</Description>
  </Variable>
  <Variable initializer="string:spadmin" input="true" name="fallbackApprover">
    <Description>A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.</Description>
  </Variable>
  <Variable initializer="string:false" input="true" name="enableRetryRequest">
    <Description>When set to true it will disable the workflow retry loop and let the 
      Provision step launch requests to handle the retries.  Enabling
      this flag will enable some older functionality.</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="string:true" name="trace"/>
  <Variable name="approvalSet">
    <Description>This attributes is set during the "Build Approval Set" step,
       which builds this list by going through the ProvisioningPlan
       to build the line items that need to be approved,

       This variable includes all ApprovalItems that are part of 
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions 
       and comments from the Approvals copy of the ApprovalItem.</Description>
  </Variable>
  <Variable input="true" name="project"/>
  <Variable name="identityRequestId" output="true">
    <Description>The sequence id of the Identity request object which is stored in 
       the name field of the identity request and auto-incremented.</Description>
  </Variable>
  <Variable name="workItemComments">
    <Description>Global comments accumulated during the workflow which should be shared
      with other approvals. When a new approval is created, the comments in this
      list will be added to the work item.</Description>
  </Variable>
  <Variable input="true" name="managerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by a manager.</Description>
  </Variable>
  <Variable input="true" name="ownerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by object owners.</Description>
  </Variable>
  <Variable input="true" name="securityOfficerElectronicSignature">
    <Description>The name of the electronic signature object that should be used when workitems 
       are completed by the security officer.</Description>
  </Variable>
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable name="identityModel" type="java.util.Map">
    <Description>The identity model that is used to represent the identity being created.</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable input="true" name="userName">
    <Description>The display name of the identity.</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisionScenario"/>
  <Variable input="true" name="daysToWaitForDeletion">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="nativeIdentity">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="applicationName">
    <Description>The native Identity</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisioningLinkRule">
    <Description>Account DeprovisioningLink Rule</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisioningModelRule">
    <Description>Account DeprovisioningModel Rule</Description>
  </Variable>
  <Variable input="true" name="accountDeprovisioningPlanRule"/>
  <Variable input="true" name="accountDeprovisioningPostProvRule"/>
  <Description>Disable all user accounts when an employee leaves the company.  Send
       email notifications to the person's Manager and to any Application Owners
       of non-authoritative Applications.  In other words, there is no reason
       to alert the HR team, since they triggered this event in the first place.</Description>
  <Step icon="Start" name="start" posX="36" posY="39">
    <Transition to="Get Model"/>
  </Step>
  <Step action="call:getIdentityModel" name="Get Model" posX="157" posY="39" resultVariable="identityModel">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="expandLinks" value="script:return true;"/>
    <Description>Initialize the data for the identity that we are disabling.</Description>
    <Transition to="Perform Deprovisioning Link Rule"/>
  </Step>
  <Step icon="Default" name="Perform Deprovisioning Link Rule" posX="511" posY="29">
    <Script>
      <Source><![CDATA[
import sailpoint.object.Link;
import sailpoint.object.Rule;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.TerminateDisable.PerformDeprovisioningLinkRule");

if(accountDeprovisioningModelRule != null) {

  List links = (List)identityModel.get("links");

  for(Map aLink: links) {
    if(((String)aLink.get("sysName")).equals(applicationName) && ((String)((Map)aLink.get("sys")).get("nativeIdentity")).equals(nativeIdentity)) {
      serilog.debug("got link to disable ("+nativeIdentity+" on "+applicationName+"):  ");

      Map beforeLink=aLink;

      Rule rule = context.getObjectById(Rule.class, accountDeprovisioningLinkRule);
      if(rule==null) {
        serilog.trace("Can't get rule by ID - attempting by name");
        rule = context.getObjectByName(Rule.class, accountDeprovisioningLinkRule);
      }
      if(rule!=null) {
        serilog.debug("Executing rule "+ rule.getName());

        Map args = new HashMap();
        args.put("handler",handler);
        args.put("log",log);
        args.put("wfcontext",wfcontext);
        args.put("workflow",workflow);
        args.put("context",context);
        args.put("plan",plan);
        args.put("applicationName", applicationName);
        args.put("identityName", identityName);
        args.put("nativeIdentity", nativeIdentity);
        args.put("link", aLink);

        Link afterLink=context.runRule(rule, args);
        links.remove(beforeLink);
        links.add(afterLink);
      } else {
        serilog.error("Can't find rule "+accountDeprovisioningLinkRule);
      }
    }
  }

  serilog.trace("After: IdentityModel="+identityModel);
  workflow.put("identityModel",identityModel);

} else {
  serilog.trace("Skipping Account Deprovisioning Link Rule Step");
}
	  ]]></Source>
    </Script>
    <Transition to="Build Provisioning Plan"/>
  </Step>
  <Step action="call:buildPlanFromIdentityModel" name="Build Provisioning Plan" posX="667" posY="134" resultVariable="plan">
    <Arg name="identityModel" value="ref:identityModel"/>
    <Description>Convert the (potentially modified) identity model into a provisioning plan.</Description>
    <Transition to="Create Disable Account Request"/>
  </Step>
  <Step icon="Default" name="Create Disable Account Request" posX="298" posY="36">
    <Script>
      <Source><![CDATA[
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.TerminateDisable.CreateDisableAccountRequest");

if(plan==null) plan=new ProvisioningPlan();

AccountRequest ar=new AccountRequest();
ar.setNativeIdentity(nativeIdentity);
ar.setApplication(applicationName);
ar.setOperation(AccountRequest.Operation.Disable);
plan.addRequest(ar);
workflow.put("plan", plan);
	  ]]></Source>
    </Script>
    <Transition to="Perform Deprovisioning Plan Rule"/>
  </Step>
  <Step icon="Default" name="Perform Deprovisioning Plan Rule" posX="284" posY="142">
    <Script>
      <Source><![CDATA[
import sailpoint.object.Rule;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.TerminateDisable.PerformDeprovisioningPlanRule");

if(accountDeprovisioningPlanRule != null) {
  Rule rule = context.getObjectById(Rule.class, accountDeprovisioningPlanRule);
  if(rule==null) {
    serilog.trace("Can't get rule by ID - attempting by name");
    rule = context.getObjectByName(Rule.class, accountDeprovisioningPlanRule);
  }
  if(rule!=null) {
    serilog.debug("Executing rule "+ rule.getName());

    Map args = new HashMap();
    args.put("handler",handler);
    args.put("log",log);
    args.put("wfcontext",wfcontext);
    args.put("workflow",workflow);
    args.put("context",context);
    args.put("plan",plan);
    args.put("applicationName", applicationName);
    args.put("identityName", identityName);
    args.put("nativeIdentity", nativeIdentity);

    context.runRule(rule, args);
  } else {
    serilog.error("Can't find rule "+accountDeprovisioningPlanRule);
    return;
  }
} else {
  serilog.debug("Skipping Account Deprovisioning Plan Rule Step");
}
	  ]]></Source>
    </Script>
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize" posX="49" posY="265">
    <Arg name="formTemplate" value="string:Identity Update"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="policyScheme" value="string:none"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into 
       project and checking policy violations.</Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="cart"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="policyViolations" to="policyViolations"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Provision">
      <Script>
        <Source><![CDATA[import sailpoint.object.Identity;
import sailpoint.api.ObjectUtil;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.TerminateDisable.Initialize");

serilog.trace("is Locked" + ObjectUtil.isLocked(context,Identity.class,identityName));

if(ObjectUtil.isLocked(context,Identity.class,identityName) == false) {
  serilog.trace("Returning True: ");
  return true;
}]]>
</Source>
      </Script>
    </Transition>
    <Transition to="wait"/>
  </Step>
  <Step icon="Default" name="wait" posX="116" posY="368">
    <Script>
      <Source><![CDATA[import sailpoint.object.Identity;
import sailpoint.api.ObjectUtil;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.TerminateDisable.wait");

serilog.trace(" waiting....");

boolean locked = true;
while(locked) {

  // Manually unlocking the identity due to the cube refresh task lock

  Identity id = context.getObjectByName(Identity.class,identityName);
  id.setLock(null);
  context.saveObject(id);
  context.commitTransaction();

  locked =ObjectUtil.isLocked(context,Identity.class,identityName);
  serilog.trace("is Locked" + ObjectUtil.isLocked(context,Identity.class,identityName));
}

serilog.trace(" done waiting...." + plan.toXml());
]]>
</Source>
    </Script>
    <Transition to="Provision"/>
  </Step>
  <Step icon="Task" name="Provision" posX="296" posY="260">
    <Arg name="approvalScheme" value="string:none"/>
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="formTemplate" value="string:Identity Update"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="manualActionsEmailTemplate" value="string:Pending Manual Changes"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policyScheme" value="string:none"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>Call the standard subprocess that will process the 
      approval decisisions and do provisioning.  This 
      includes calling any configured provisioning 
      connectors and building manual actions.</Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="Finalize"/>
  </Step>
  <Step icon="Default" name="Finalize" posX="421" posY="260" resultVariable="project">
    <Arg name="approvalSet" value="ref:cart"/>
    <Arg name="batchRequestItemId" value="ref:batchRequestItemId"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="ticketManagementApplication" value="ref:ticketManagementApplication"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>
      Call the standard subprocess that can audit/finalize the request.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" id="402881c64477dee6014477e03580026e" name="Identity Request Finalize"/>
    </WorkflowRef>
    <Transition to="Post Provisioning Rule"/>
  </Step>
  <Step icon="Default" name="Post Provisioning Rule" posX="568" posY="258">
    <Script>
      <Source><![CDATA[import sailpoint.object.Rule;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.TerminateDisable.PostProvisioningPlanRule");

if(accountDeprovisioningPostProvRule != null) {
  serilog.debug("Executing rule "+ accountDeprovisioningPostProvRule);
  Rule rule = context.getObjectById(Rule.class, accountDeprovisioningPostProvRule);
  if(rule==null) {
    serilog.trace("Can't get rule by ID - attempting by name");
    rule = context.getObjectByName(Rule.class, accountDeprovisioningPostProvRule);
  }
  if(rule!=null) {
    serilog.debug("Executing rule "+ rule.getName());

    Map args = new HashMap();
    args.put("handler",handler);
    args.put("log",log);
    args.put("wfcontext",wfcontext);
    args.put("workflow",workflow);
    args.put("context",context);
    args.put("plan",plan);
    args.put("applicationName", applicationName);
    args.put("identityName", identityName);
    args.put("nativeIdentity", nativeIdentity);
    args.put("identityModel", identityModel);

    context.runRule(rule, args);
  } else {
    serilog.error("Can't find rule "+accountDeprovisioningPostProvRule);
    return;
  }
} else {
  serilog.trace("Skipping Account Deprovisioning Post Provisioning Rule Step");
}

      ]]></Source>
    </Script>
    <Transition to="Schedule Account Deletion"/>
  </Step>
  <Step action="call:scheduleWorkflowEvent" icon="Default" name="Schedule Account Deletion" posX="717" posY="258">
    <Arg name="workflow" value="string:Lifecycle Event - Terminate Delete Accounts"/>
    <Arg name="owner" value="ref:identityName"/>
    <Arg name="requestName" value="string:Delete Deprovisioned Application Account:  $(applicationName) : $(nativeIdentity)"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="sponsor" value="ref:launcher"/>
    <Arg name="trigger" value="ref:trigger"/>
    <Arg name="event" value="ref:event"/>
    <Arg name="scheduleDate">
      <Script>
        <Source><![CDATA[
import java.util.*;
          
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.arg.scheduleDate");
          
Calendar calendar = Calendar.getInstance(); 
          
calendar.setTime(new Date());
          
// add the number of days before delete

int days=0;
          
if(daysToWaitForDeletion!=null) {
          days = Integer.parseInt(daysToWaitForDeletion);
          }
          
calendar.add(Calendar.DAY_OF_YEAR, days);
serilog.debug("Scheduling delete for "+days+" days from now");
Date deleteDate = calendar.getTime();
return (deleteDate);
        ]]></Source>
      </Script>
    </Arg>
    <Arg name="nativeIdentity" value="ref:nativeIdentity"/>
    <Arg name="applicationName" value="ref:applicationName"/>
    <!-- workaround for Bug #27980 -->
    <Arg name="catchExceptions" value="true"/>
    
    <ConditionScript>
      <Source>
if(daysToWaitForDeletion == null) return false;
else return true;
       </Source>
    </ConditionScript>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity" posX="621" posY="352">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="correlateEntitlements" value="string:true"/>
    <Arg name="provision" value="string:true"/>
    <Arg name="synchronizeAttributes" value="string:true"/>
    <Arg name="refreshLinks" value="script:return true;"/>
    <Description>Update the identity with anything we might have provisioned to applications</Description>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="760" posY="367"/>
</Workflow>

