<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule   language="beanshell" name="Account Provisioning - Initiate Reactivation Workflows" type="Workflow">
  <Description>Loop over every account and perform the proper rehire activation scenario according to the reactivation attributes set up on the application</Description>
  <Source><![CDATA[
import sailpoint.object.WorkflowLaunch;
import sailpoint.api.WorkflowSession;
import sailpoint.api.Workflower;
import sailpoint.api.IdentityLifecycler;
import java.util.Iterator;
import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import sailpoint.object.Request;
import java.util.Date;
import java.util.Calendar;
import sailpoint.api.Terminator;
import sailpoint.tools.xml.XMLObjectFactory;
import sailpoint.tools.xml.XMLReferenceResolver;
import sailpoint.object.*;
import sailpoint.api.*;

// Expect: java.lang.String applicationName
// Expect: java.lang.String identityName
// Expect: java.lang.String nativeIdentity
// Expect: java.util.Map accountReactivationMap
// Expect: java.lang.String userName
// Expect: sailpoint.object.IdentityTrigger trigger
// Expect: java.lang.String trace
// Expect: sailpoint.object.ProvisioningPlan plan
// Expect: sailpoint.object.ProvisioningProject project

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.InitiateReactivationWorkflows");

Identity identObj = context.getObjectByName(Identity.class,identityName);
List links = identObj.getLinks();
String workflowName = null;   		

//loop over every account and perform the proper rehire activation scenario according to the reactivation attributes set up on the application. 
//one or more flows can be initiated, depending on what in the world you are doing to the account. Renames/moves are treated separate from disables and deleted on purpose 
//as certain applications may only support certain functions directly and we dont want to wait for a rename before we can disable the account or vice versa.	

for(Link aLink : links) {
  String appName=aLink.getApplication().getName();
  String nativeId=aLink.getNativeIdentity();
  serilog.debug("Reactivating "+nativeId+" on "+appName);
  Map accountMap = (Map)accountReactivationMap.get(appName);

  /** Create the plan for the identity and stick the requests on it **/
  Attributes args = new Attributes();
  // pass in the display name to avoid having to do a lookup
  args.put("identityName", identityName);
  args.put("doRefresh", true);
  args.put("identityDisplayName", identObj.getName());
  args.put("nativeIdentity", nativeId);
  args.put("applicationName", appName);
  workflowName="Lifecycle Event - Reactivate Accounts";
  args.put("userName", userName);
  args.put("trigger", trigger);
  args.put("trace", trace);
  args.put("plan", plan);
  args.put("project",project);
  args.put("enableAccounts", accountMap.get("enableOnReactivation"));
  args.put("accountReactivationLinkRule", accountMap.get("accountReactivationLinkRule"));
  args.put("accountReactivationPlanRule", accountMap.get("accountReactivationPlanRule"));
  args.put("accountReactivationPostProvRule", accountMap.get("accountReactivationPostProvRule"));


  Workflow wf = (Workflow) context.getObjectByName(Workflow.class,workflowName);
  WorkflowLaunch wflaunch = new WorkflowLaunch();
  wflaunch.setWorkflowName(wf.getName());
  wflaunch.setWorkflowRef(wf.getName());
  wflaunch.setCaseName("Reactivation:  "+ identObj.getName());
  wflaunch.setVariables(args);
  //Create Workflower and launch workflow from WorkflowLaunch
  Workflower workflower = new Workflower(context);
  WorkflowLaunch launch = workflower.launch(wflaunch);
  // print workflowcase ID (example only; might not want to do this in the task)
  String workFlowId = launch.getWorkflowCase().getId();
  serilog.debug("workFlowId: "+workFlowId);
}
  ]]></Source>
</Rule>
