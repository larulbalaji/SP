<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule   language="beanshell"  name="DeReProvisioning - Update Reactivated AD Account Post-Provisioning" type="Workflow">
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler"/>
      <Argument name="workflow"/>
      <Argument name="plan"/>
      <Argument name="nativeIdentity"/>
      <Argument name="identityName"/>
      <Argument name="applicationName"/>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[

import sailpoint.object.*;
import sailpoint.api.*;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.Deprovisioning.UpdateADPostProv");

// Expect: java.lang.String applicationName
// Expect: java.lang.String identityName
// Expect: java.lang.String nativeIdentity

serilog.debug("Setting the new plan:    "+ nativeIdentity);

Identity cube = context.getObjectByName(Identity.class, identityName);
Application app = context.getObjectByName(Application.class, applicationName);

IdentityService is = new IdentityService(context);
Link link = is.getLink(cube, app, null, nativeIdentity);
serilog.debug("Link Is:    "+ link);
String oldDN = link.getNativeIdentity();

//String cn = link.getAttribute("cn");
String cn = cube.getFirstname()  +" "+ cube.getLastname();
String newDN = "cn=" + cn + ",ou=default,ou=eur,ou=organizations,dc=nestle,dc=com";

serilog.debug("nativeIdentity is " + newDN);
link.setAttribute("distinguishedName", newDN);
link.setNativeIdentity(newDN);
context.saveObject(link);
context.saveObject(cube);
  context.commitTransaction();
  
  List appList = new ArrayList();
  appList.add(app);
  List entGroups =  cube.getExceptions(appList);
  serilog.debug("EntGRoups:    "+ entGroups);
 
 if(entGroups!=null) {
 
   for(EntitlementGroup aEG : entGroups) {
     serilog.debug("Got AN EntitlementGroup :   "+ aEG);
     if( aEG.getNativeIdentity().equalsIgnoreCase(oldDN) ) {
     
         serilog.debug("Matches:    ");
         //set the displayName here too if need be
         
         aEG.setNativeIdentity(newDN);
         context.saveObject(aEG);
         context.saveObject(cube);
         context.commitTransaction();       
     } 
   }
 }

serilog.debug("Saved NativeIdentity AFTER COMMIT = " + link.getNativeIdentity());


  ]]></Source>
</Rule>
