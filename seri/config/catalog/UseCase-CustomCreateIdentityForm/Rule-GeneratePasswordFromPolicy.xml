<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell"  name="Generate Password from Policy - SERI" type="FieldValue">
  <Description>This rule is used in a "create account" provisioning policy to generates a password from a password policy. Failing that, it will return "xyzzy".</Description>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
           The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
import sailpoint.api.PasswordGenerator;
import sailpoint.object.Application;
import sailpoint.object.Identity;
import sailpoint.tools.GeneralException;
import sailpoint.object.PasswordPolicy;
import sailpoint.object.*;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.GeneratePasswordFromPolicy");

//To do this from an application:

//String appname = field.getApplication();
//Application app = context.getObjectByName(Application.class, appname);
//PasswordGenerator gen = new PasswordGenerator(context);


//To do this directly on a Policy:
String policyName = "AD Base Password Policy";
PasswordPolicy policy = context.getObjectByName(PasswordPolicy.class, policyName);
PasswordGenerator gen = new PasswordGenerator(context);

try {
  log.debug("Trying to generate password from Policy("+policyName+") policy");

  //To do this from an application:
  //String password=gen.generatePassword(identity, app);
  
  //To do this directly on a Policy:
  //from source: String generatePassword(PasswordPolicy policy)
  String password=gen.generatePassword(policy);
  return password;
} catch (GeneralException ge) {
  try {
      log.debug("That failed. Trying to generate a default password (10 chars, no policy)");
      return gen.generateDefaultPassword();
    } catch (GeneralException ge) {
      log.debug("That failed. Returning xyzzy");
      return "xyzzy";
    }
  }]]>
}
</Source>
</Rule>
