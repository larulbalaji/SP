<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest"
  name="Workflow - Lifecycle Event - Location Change" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="doRefresh" initializer="String:false">
    <Description>Executes the Identity Refresh Step</Description>
  </Variable>
  <Variable input="true" name="fixLink" initializer="string:None">
    <Description>
      Used to determine which method we use to update the link object after a move. By default, the AD AfterProvisioning
      rule does all the work.  The older techniques of targeted agg and direct link manipulation are left for reference.
      Options: Agg, Link, or None
    </Description>
  </Variable>
  <Variable input="true" name="event" transient="true"
    type="sailpoint.object.IdentityChangeEvent">
    <Description>
      The IdentityChangeEvent. It can be used to build
      the
      provisioning plan, but does not need to be
      persisted with the case,
      so marked as transient.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable
    initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)"
    input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for
      this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan, which is built by a service
      method. </Description>
  </Variable>
  <Variable initializer="string:false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning. This
      will cause
      changes to the entitlements compiled from role
      assignments to be
      applied immediately to the identity cube rather than waiting
      for the next
      refresh/reaggregation after the provisioning system
      completes the
      request.
    </Description>
  </Variable>
  <Variable initializer="string:http://localhost:8080/identityiq"
    name="baseURL">
    <Description>
      Set to true to enable optimistic provisioning. This
      will cause
      changes to the entitlements compiled from role
      assignments to be
      applied immediately to the identity cube rather than waiting
      for the next
      refresh/reaggregation after the provisioning system
      completes the
      request.
    </Description>
  </Variable>

  <Variable initializer="string:true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the
      "background"
      option to force the workflow to be suspend and be
      resumed in a
      background task thread. This prevents the browser
      session from
      hanging since provision can sometimes take a long
      time. For demos
      and testing it can be better to do this in the
      foreground so that
      provisioning will have been performed when
      control is returned to the
      user. This prevents having to run the
      Perform Maintenance task to
      see the resutls of the request.
    </Description>
  </Variable>
  <Variable initializer="string:spadmin" input="true"
    name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that
      will
      be assigned any approvals where the owner of the approver
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated. Defaults to LCM.
    </Description>
  </Variable>
  <Variable initializer="string:false" input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true
      trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of
      the ProvisioningPlan.
    </Description>
  </Variable>
  <Variable name="accounts" />
  <Variable name="identityRequestId" output="true">
    <Description>
      The sequence id of the Identity request object which is stored in
      the name field of the identity request.
    </Description>
  </Variable>
  <Variable initializer="Active Directory" name="applicationName" />
  <Description>Joiner workflow. Enable Birthright roles when an employee
    joins the company.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library" />
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="10" posY="20">
    <Description>Initialize a plan</Description>
    <Script>
      <Source><![CDATA[
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.LocationChange.Start");
serilog.debug("Starting Location Change Workflow for: " + identityName + "::" + identityDisplayName);
      ]]></Source>
    </Script>
    <Transition to="Stop" when="(event.getObject().getAttribute(&quot;location&quot;) == null)"/>
    <Transition to="Create Plan" />
  </Step>
  <Step name="Create Plan" resultVariable="plan">
    <Script>
      <Source><![CDATA[
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.Application;
import sailpoint.object.Identity;
import sailpoint.object.Configuration;
import sailpoint.object.Link;
import java.util.List;
import java.util.HashMap;

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.LocationChange.CreatePlan");

Identity identity = context.getObjectByName(Identity.class, identityName);  
List links = identity.getLinks();
ProvisioningPlan plan = null;

//DN base for moves.  Change this if necessary.   For SERI we will use the location value in the SERI Configuration Object.
String movednbase = ",ou=Demo,dc=seri,dc=sailpointdemo,dc=com";

//Only looking at AD Accounts
HashMap account = new HashMap();
for (Link link : links) {
    if (link.getApplicationName().equals(applicationName)) {
        String applicationName = link.getApplicationName();
        plan = new ProvisioningPlan();
        plan.setIdentity(identity);

        String nativeIdentity = link.getNativeIdentity();
        AccountRequest ar = new AccountRequest();
        ar.setNativeIdentity(nativeIdentity);
        ar.setApplication(applicationName);
        ar.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        AttributeRequest attrReq = new AttributeRequest();
        attrReq.setName("AC_NewParent");
        attrReq.setOperation(ProvisioningPlan.Operation.Set);

        confObject = context.getObjectByName(Configuration.class, "Location to OU Configuration");
        String location = identity.getAttribute("location");
        String ou = confObject.getString(location);  

        String cn = link.getAttribute("cn");
        String movedn = "ou=" + location + ",ou=" + ou + movednbase; 
        attrReq.setValue(movedn);
        serilog.debug("OriginalDN is " + nativeIdentity);
        serilog.debug("NewParent is " + movedn);

        String newDN = "cn=" + cn + "," + movedn;
        serilog.debug("NewDN is " + newDN);
        String id = link.getId();
        serilog.debug("App ID = " + id);
        account.put(id,newDN);
        ar.add(attrReq);
        plan.addRequest(ar);
    }
}
//Really don't need this anymore, but leaving it around
workflow.put("accounts",account);
serilog.debug(plan.toXml());
return plan;

        ]]></Source>
      </Script>
    <Transition to="Call Provisioning" />
  </Step>

  <Step icon="Task" name="Call Provisioning" posX="500" posY="8">
    <Arg name="identityName" value="ref:identityName" />
    <Arg name="plan" value="ref:plan" />
    <Description>
      We could call the standard LCM Provisioning subprocess, but sometimes
      this is much easier</Description>
    <Script>
      <Source><![CDATA[
import sailpoint.object.Attributes;      
import sailpoint.api.Provisioner;
import sailpoint.api.Identitizer;
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.LocationChange.Provision");

serilog.debug("Provisioning");
Provisioner provisioner = new Provisioner(context);
provisioner.setNoLocking(true);
provisioner.setDoRefresh(true);
Attributes refreshOptions = new Attributes();  
refreshOptions.put(Identitizer.ARG_CORRELATE_ENTITLEMENTS,true);
refreshOptions.put(Identitizer.ARG_SYNCHRONIZE_ATTRIBUTES,true);
provisioner.setRefreshOptions(refreshOptions);
//provisioner.compile(plan);
provisioner.execute(plan);
serilog.debug("Finished provisioning");
//serilog.debug("Targeted Agg");    
      ]]></Source></Script>
    <Transition to="Targeted Aggregation">
      <Script>
        <Source>
          return fixLink.equals("Agg");
        </Source>
      </Script>
    </Transition>
    <Transition to="Save Link">
      <Script>
        <Source>
          return fixLink.equals("Link");
        </Source>
      </Script>
    </Transition>
    <Transition to="Stop"/>
  </Step>
  <Step name="Save Link">
    <Script>
      <Source><![CDATA[
import sailpoint.object.Identity;
import sailpoint.object.Link;
import java.util.HashMap;
import java.util.Map;
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.LocationChange.saveLink");
serilog.debug("Starting SaveLink Step");
Identity identity = context.getObjectByName(Identity.class,identityName);
for (Map.Entry entry : accounts.entrySet()) { 
    String key = entry.getKey();
    String value = (String) entry.getValue();

    serilog.debug(key + " : " + value);

    Link link = context.getObjectById(Link.class,key);
    link.setNativeIdentity(value);
    link.setAttribute("distinguishedName",value);
    context.saveObject(link);
    context.commitTransaction();
    serilog.trace(link.toXml());
} 
serilog.debug("Save Link Finished");
      ]]></Source>
    </Script>
    <Transition to="Stop" />
  </Step>

  <Step name="Targeted Aggregation">
    <Description>This is done to update the link. Other examples do a
      change to the Link object then save. This method does a target
      aggregation on the one user </Description>
    <Script>
      <Source><![CDATA[
import sailpoint.object.*;
import sailpoint.api.*;
import sailpoint.connector.ADLDAPConnector;

// Expect: java.lang.String applicationName
// Expect: java.lang.String identityName
// Expect: java.lang.String nativeIdentity

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.LocationChange.TargetAggregation");
serilog.debug("Target Aggregating " + identityName);

Identity cube = context.getObjectByName(Identity.class, identityName);

//Remove any locks
if (cube.isLocked()) {
    serilog.debug("Cube was locked");
    cube.setLock(null);
    context.saveObject(cube);
    context.commitTransaction();
    serilog.debug("Cube is now unlocked");
} else {
    serilog.debug("Cube not Locked");
}
Application app = context.getObjectByName(Application.class, applicationName);

ADLDAPConnector connector = new sailpoint.connector.ADLDAPConnector(app);  
if (null == connector) {
    String errMsg = "ERROR: Failed to get connector for application: " + appName;
    serilog.debug(errMsg);

    return;
}


String nativeIdentity = "";
Object objectGuid = "";
IdentityService is = new IdentityService(context);
List links = is.getLinks(cube,app,null);
for (Link link : links) {
    //Assuming we only get one;
    serilog.debug("Got an AD Link " + link);
    nativeIdentity = link.getNativeIdentity();
    objectGuid=link.getAttribute("objectguid");
}
serilog.debug("nativeIdentity = " + nativeIdentity);

//Get the object using objectGuid. But the connector expects the DN as i uses the
//DN to get the relevant context in forest environment. So pass the DN in the options
Map options = new HashMap();
options.put("distinguishedName", nativeIdentity);

serilog.debug("objectGuid for " + identityName + " is " + objectGuid);
ResourceObject rObj = connector.getObject("account", objectGuid, options);

if (null == rObj) {
    String errMsg = "ERROR: Could not get ResourceObject for account: " + nativeIdentityName;

    serilog.debu(errMsg);

    return;
}

// Create an arguments map for the aggregation task. 
// To change this (if you need to), the map contains aggregation options and is the same as the 
// arguments to the account aggregation tasks.  Some suggested defaults are:
Attributes argMap = new Attributes();
argMap.put("promoteAttributes",       "true");
argMap.put("correlateEntitlements",   "true");
argMap.put("noOptimizeReaggregation", "true");  // Note: Set to false to disable re-correlation.
// Construct an aggregator instance.
Aggregator agg = new Aggregator(context, argMap);
if (null == agg) {
    String errMsg = "ERROR: Null Aggregator returned from constructor.";
    serilog.debug(errMsg);

    return;
}

// Invoke the aggregation task by calling the aggregate() method.
// Note: the aggregate() call may take several seconds to complete.

TaskResult taskResult = agg.aggregate(app, rObj);

if (null == taskResult) {
    String errMsg = "ERROR: Null taskResult returned from aggregate() call.";
    return;
}
serilog.debug("Workflow LifecycleEvent Location Change is Finished");
      ]]></Source>
    </Script>

    <Transition to="Stop" />
  </Step>

  <Step icon="Stop" name="Stop" posX="526" posY="170" />

</Workflow>
