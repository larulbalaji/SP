<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule - Initiate Accounts With No Entitlements Deprovisioning Workflows" type="Workflow">
  <Description>A rule used by a Workflow to determine a step action or variable value. Note that an Attributes map of all variables from the current WorkflowContext, merged with the arguments from the Step, is also passed into the workflow rule.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler">
        <Description>
          The workflow handler associated with the current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="workflow">
        <Description>
          The current Workflow definition.
        </Description>
      </Argument>
      <Argument name="step">
        <Description>
          The current Step.
        </Description>
      </Argument>
      <Argument name="approval">
        <Description>
          The current Approval.
        </Description>
      </Argument>
      <Argument name="item">
        <Description>
          The WorkItem being processed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
    <![CDATA[  
  
  import sailpoint.object.WorkflowLaunch;
import sailpoint.api.Workflower;
import sailpoint.api.WorkflowSession;
import sailpoint.api.IdentityLifecycler;
import java.util.Iterator;
import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import sailpoint.object.Request;
import java.util.Date;
import java.util.Calendar;
import sailpoint.api.Terminator;
import sailpoint.tools.xml.XMLObjectFactory;
import sailpoint.tools.xml.XMLReferenceResolver;
import sailpoint.object.*;
import sailpoint.api.*; 
import sailpoint.tools.*;
import sailpoint.api.ObjectUtil;

// Expect: java.lang.String identityName
// Expect: sailpoint.object.IdentityChangeEvent event
// Expect: java.lang.String userName
// Expect: sailpoint.object.IdentityTrigger trigger
// Expect: java.lang.String trace
// Expect: sailpoint.object.ProvisioningPlan plan
// Expect: sailpoint.object.ProvisioningProject project
// Expect: sailpoint.launch.Launcher launcher

// Expect: java.lang.String accountNoEntitlementsModelRule
// Expect: java.lang.String accountNoEntltlementsPlanRule
// Expect: java.lang.String accountNoEntitlementsPostProvRule
// Expect: java.util.Map accountDeprovisioningMap

serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.InitAccountsNoEntitlementsDeprovWF");

if(event.getOldObject() != null) {  
  Identity previousIdentity = (Identity)event.getOldObject();
  Identity identObj = context.getObjectByName(Identity.class,identityName);
  List links = identObj.getLinks();
  String workflowName = null;   		

  serilog.debug("Working on Identity: " + identityName );
  //loop over every account and perform the proper deprovisioning scenario according to the deprovisioning map we created when we inititialized the workflow.
  //one or more flows can be initiated, depending on what in the world you are doing to the account. Renames/moves are treated separate from disables and deleted on purpose 
  //as certain applications may only support certain functions directly and we dont want to wait for a rename before we can disable the account or vice versa.	


	for(int x =0; x < links.size();x++) {
    Link aLink = (Link)links.get(x);

    if( aLink.hasEntitlements() == false &&
        previousIdentity.getLinks() != null &&
        previousIdentity.getLinks().size()>0 &&
        previousIdentity.getLinks().size()>x &&
        ((Link)previousIdentity.getLinks().get(x)).getApplication().getName().equals(aLink.getApplication().getName()) &&
        ((Link)previousIdentity.getLinks().get(x)).getNativeIdentity().equals(aLink.getNativeIdentity()) &&
        // not sure why this test was present. In my session this was ALWAYS false ar
        //((Link)previousIdentity.getLinks().get(x)).hasEntitlements() &&
        aLink.getApplication().isAuthoritative() == false &&
        aLink.getApplication().getAttributeValue("accountNoEntitlementsDeprovisioningPolicy")!=null && 
        ((String) aLink.getApplication().getAttributeValue("accountNoEntitlementsDeprovisioningPolicy")).equals("Do Nothing") == false &&
        aLink.getApplication().isDisabled() == false ) 
      {
      serilog.debug("Run Disable Workflow: " + ((String) aLink.getApplication().getAttributeValue("accountNoEntitlementsDeprovisioningPolicy")) + " on Application: " + aLink.getApplication().getName() + ", Account Name: " + aLink.getNativeIdentity() );
      Map accountMap = (Map)accountDeprovisioningMap.get(aLink.getApplication().getName());
      /** Create the plan for the identity and stick the requests on it **/
      Attributes args = new Attributes();
      // pass in the display name to avoid having to do a lookup
      args.put("identityName", identityName);
      args.put("doRefresh", true);
      args.put("identityDisplayName", identObj.getName());
      args.put("nativeIdentity", aLink.getNativeIdentity());
      args.put("applicationName", aLink.getApplicationName());
      args.put("accountDeprovisionScenario", accountMap.get("accountNoEntitlementsDeprovisioningPolicy"));

      // get this values for the application we are working on. 
      // Note that the application must have been edited with the new attributes. 
      //      or these attributes must have been added manually
      String accountNoEntitlementsPostProvRule =  aLink.getApplication().getAttributeValue("accountNoEntitlementsPostProvRule");
      String accountNoEntitlementsModelRule =     aLink.getApplication().getAttributeValue("accountNoEntitlementsModelRule");
      String accountNoEntltlementsPlanRule =      aLink.getApplication().getAttributeValue("accountNoEntltlementsPlanRule");

      if(accountMap.get("accountNoEntitlementsDeprovisioningPolicy")!= null) {
        if(((String)accountMap.get("accountNoEntitlementsDeprovisioningPolicy")).equals("Disable Account Immediately")) {
          workflowName="Lifecycle Event - Terminate Disable Accounts";
          args.put("userName", userName);
          args.put("trigger", trigger);
          args.put("trace", trace);
          args.put("plan", plan);
          args.put("project",project);


          args.put("accountDeprovisioningModelRule",accountNoEntitlementsModelRule);
          args.put("accountDeprovisioningPlanRule",accountNoEntltlementsPlanRule);
          args.put("accountDeprovisioningPostProvRule",accountNoEntitlementsPostProvRule);

          Workflow wf = (Workflow) context.getObjectByName(Workflow.class,workflowName);
          WorkflowLaunch wflaunch = new WorkflowLaunch();
          wflaunch.setWorkflowName(wf.getName());
          wflaunch.setWorkflowRef(wf.getName());
          wflaunch.setCaseName("Disable Account With No Entitlements");
          wflaunch.setVariables(args);
          //Create Workflower and launch workflow from WorkflowLaunch
          Workflower workflower = new Workflower(context);
          WorkflowLaunch launch = workflower.launch(wflaunch);
          // print workflowcase ID (example only; might not want to do this in the task)
          String workFlowId = launch.getWorkflowCase().getId();
          serilog.debug("workFlowId: "+workFlowId);
        } else  if(((String)accountMap.get("accountNoEntitlementsDeprovisioningPolicy")).equals("Disable Account Immediately, Wait, then Delete")) {
          workflowName="Lifecycle Event - Terminate Disable Accounts";
          args.put("daysToWaitForDeletion", accountMap.get("daysToWaitForDeletionOnLossOfEntitlements"));
          args.put("accountDeprovisioningModelRule",accountNoEntitlementsModelRule);
          args.put("accountDeprovisioningPlanRule",accountNoEntltlementsPlanRule);
          args.put("accountDeprovisioningPostProvRule",accountNoEntitlementsPostProvRule);
          args.put("userName", userName);
          args.put("trigger", trigger);
          args.put("trace", trace);
          args.put("plan", plan);
          args.put("project",project);

          Workflow wf = (Workflow) context.getObjectByName(Workflow.class,workflowName);
          WorkflowLaunch wflaunch = new WorkflowLaunch();
          wflaunch.setWorkflowName(wf.getName());
          wflaunch.setWorkflowRef(wf.getName());
          wflaunch.setCaseName("Disable Then Delete Account With No Entitlements");
          wflaunch.setVariables(args);
					//Create Workflower and launch workflow from WorkflowLaunch
					Workflower workflower = new Workflower(context);
					WorkflowLaunch launch = workflower.launch(wflaunch);
					// print workflowcase ID (example only; might not want to do this in the task)
					String workFlowId = launch.getWorkflowCase().getId();
          serilog.debug("workFlowId: "+workFlowId);
        } else if(((String)accountMap.get("accountNoEntitlementsDeprovisioningPolicy")).equals("Delete Account Immediately")) {
          workflowName="Lifecycle Event - Terminate Delete Accounts";
          args.put("userName", userName);
          args.put("trigger", trigger);
          args.put("trace", trace);
          args.put("plan", plan);
          args.put("project",project);
          args.put("launcher",launcher);
          args.put("accountDeprovisioningModelRule",accountNoEntitlementsModelRule);
          args.put("accountDeprovisioningPlanRule",accountNoEntltlementsPlanRule);
          args.put("accountDeprovisioningPostProvRule",accountNoEntitlementsPostProvRule);

          Workflow wf = (Workflow) context.getObjectByName(Workflow.class,workflowName);
          WorkflowLaunch wflaunch = new WorkflowLaunch();
          wflaunch.setWorkflowName(wf.getName());
          wflaunch.setWorkflowRef(wf.getName());
          wflaunch.setCaseName("Delete Account With No Entitlements");
          wflaunch.setVariables(args);
          //Create Workflower and launch workflow from WorkflowLaunch
          Workflower workflower = new Workflower(context);
          WorkflowLaunch launch = workflower.launch(wflaunch);
          // print workflowcase ID (example only; might not want to do this in the task)
          String workFlowId = launch.getWorkflowCase().getId();
          serilog.debug("workFlowId: "+workFlowId);
        }
      }
    }
	}
} else {
  serilog.debug( "event.getOldObject() returned null" );
}

]]>
</Source>
</Rule>
