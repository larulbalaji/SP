<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule   language="beanshell"  name="EmailManagerAccountPasswords">
  <Description>A rule used to send an email to the manager with for new accounts</Description>
  <Source>	
      <![CDATA[
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import sailpoint.api.SailPointContext;
import sailpoint.object.Application;
import sailpoint.object.Identity;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.GenericRequest;
import sailpoint.object.ProvisioningPlan.Operation;
import sailpoint.object.ProvisioningPlan.PermissionRequest;
import sailpoint.object.ProvisioningProject;
import sailpoint.object.ProvisioningResult;
import sailpoint.tools.GeneralException;


import sailpoint.tools.Util;
import sailpoint.object.EmailOptions;
import sailpoint.object.EmailTemplate;
import sailpoint.integration.JsonUtil;
import sailpoint.object.Schema;
import sailpoint.object.Application;

/**
   This rule emails the manager a users new passwords for each new account created in the provisioning project.
   This rule must be called after the plan as been compiled in a workflow.  It should be called after provisioning 
   has been successful.  The application attribute passwordAttrName must be created.  The value of passwordAttrName 
   value must be set to the attribute in the account provisioning policy that will contain the password.  For example 
   for active directory this would be *password*.
 */
public boolean emailManagerAccountPasswords(ProvisioningProject proj, String templateName) {

  serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.EmailManagerAccountPasswords");


  try {

    serilog.debug("In emailManagerAccountPasswords");
    serilog.debug("TemplateName:" + templateName);
    String identityName = proj.getIdentity();
    List plans = proj.getPlans();
    if (null == plans) {
      serilog.debug("Plans null");
      return false;
    }

    serilog.debug("Project:" + proj.toXml());

    List mapPwdList = new ArrayList();

    //Iterate thru each of the plans in the project locking for creates.
    //with password meta data set on the application
    Iterator itrPlans = plans.iterator();
    while(itrPlans.hasNext()){

      serilog.debug("Iterate Plans");

      ProvisioningPlan plan = (ProvisioningPlan) itrPlans.next();
      List accts = plan.getAccountRequests();
      Iterator itrAccts = accts.iterator();

      while(itrAccts.hasNext()) {
        serilog.debug("Iterate Account Requests");
        AccountRequest acctReq = (AccountRequest) itrAccts.next();
        serilog.debug("Account Request:" + acctReq.toXml());

        //if this account request is not a create we skip it
        if (AccountRequest.Operation.Create.equals(acctReq.getOperation())) {

          String application = acctReq.getApplication();
          Application app = (Application)context.getObject(Application.class, application);
          if (app == null) {
            serilog.debug("App is null");
            return false;
          }

          String appPwdAttr = app.getAttributeValue("passwordAttrName");
          if (appPwdAttr == null) {
            serilog.debug("WARNING: passwordAttrName is null on application " + application);
          }

          Schema acctSchema = app.getAccountSchema();
          if (acctSchema == null) {
            serilog.debug("acctSchema is null");
            return false;    
          }

          //search based on the the display name which is more friendly
          //if we don't have that then grab the native id which is required on the schema
          String appIdAttr = acctSchema.getDisplayAttribute();
          if (appIdAttr == null) appIdAttr = acctSchema.getIdentityAttribute();

          serilog.debug("Application ID attribute: " + appIdAttr );

          String nativeIdentity = acctReq.getNativeIdentity();
          String plainTextPwd = "[Password Not Available]";
          String accountId = null;

          List attrList = acctReq.getAttributeRequests();
          Iterator itrAttr = attrList.iterator();

          while(itrAttr.hasNext()){
            serilog.debug("Iterate attribute request");

            AttributeRequest attrReq = (AttributeRequest) itrAttr.next();
            String attrName = attrReq.getName();
            Object objValue = attrReq.getValue();
            serilog.debug("Before null check");
            if (objValue != null && objValue instanceof String) {
              serilog.debug("after null check");
              String attrValue = (String) objValue;

              serilog.debug("1 appPwdAttr:" + appPwdAttr);
              if (appPwdAttr != null && appPwdAttr.equalsIgnoreCase(attrName)) {
                plainTextPwd = context.decrypt(attrValue);
              }

              serilog.debug("2");
              if ( appIdAttr != null && appIdAttr.equalsIgnoreCase(attrName) ) {
                accountId = attrValue;
              }
              serilog.debug("3");
            }
          } //while iterate attribute request

          serilog.debug("After While");

          //skip any roles in the plan
          if (!application.equalsIgnoreCase("IIQ")) {

            serilog.debug("Adding a password");

            //if we did not find the account id in the plan then use the nativeIdentity
            if (accountId == null)
            accountId = nativeIdentity;

            Map pwd = new HashMap();
            pwd.put("application", application);
            pwd.put("accountid", accountId);
            pwd.put("password", plainTextPwd);

            mapPwdList.add(pwd);

            serilog.debug("Add Password to the list");

          } //if not iiq
        } //if create
      } //while account requests
    }

    serilog.debug("Attempt to send email");

    //We didn't find any passwords in the compiled project so nothing todo here
    if (mapPwdList.size() <= 0) return true;

    Map mailargs  = new HashMap();

    Identity id       = null;
    String _lastname  = null;
    String _firstname = null;
    if(null != identityName && identityName.length() > 0) {
      id =  context.getObjectByName(Identity.class,identityName);
      if (id == null) {
        serilog.debug("id null");
        return false;
      }

      _lastname  = id.getLastname(); 
      _firstname = id.getFirstname(); 
    }

    String toAddress    = id.getManager().getEmail();
    if (toAddress == null ) {
      serilog.debug("Manager email null");
      return false;
    }

    mailargs.put("userId"          , identityName);
    mailargs.put("firstName"       , _firstname);
    mailargs.put("lastName"        , _lastname);
    mailargs.put("passwordMap"       , mapPwdList);

    EmailTemplate template = context.getObjectByName(EmailTemplate.class, templateName);
    if ( template == null ) {
      serilog.debug("Email template null name:" + templateName);
      return false;
    }

    EmailOptions mailopts = new EmailOptions(toAddress, mailargs);

    context.sendEmailNotification(template, mailopts);

  } catch (GeneralException ge) {
    serilog.warn("General Exception Caught:" + ge);
    return false;
  }

  serilog.trace("Return without error");
  return true;
}
	
  
    ]]>
    </Source>
</Rule>
