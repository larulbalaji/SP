<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="Approvals-LCMApprovals"
  type="Subprocess">
  <Variable input="true" name="identityName" required="true">
    <Description>The name of the identity object being modified.</Description>
  </Variable>
  <Variable input="true" name="batchRequestId">
    <Description>Batch request id.</Description>
  </Variable>
  <Variable
    initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)"
    input="true" name="identityDisplayName">
    <Description>The displayName of the identity being updated.
      This may
      be passed in, if not the script queries for this
      using a projection
      query and falls back to the name.</Description>
  </Variable>
  <Variable initializer="script:getIdentityProperty(identityName, &quot;id&quot;)"
    input="true" name="identityId">
    <Description>The id of the identity being updated.</Description>
  </Variable>
  <Variable input="true" name="identityRequestId">
    <Description>The ID of the IdentityRequest for this request.</Description>
  </Variable>
  <Variable input="true" name="approvalScheme" required="true">
    <Description>A csv string that specifies how approvals should be
      generated for
      the incoming request.

      The value can be any of the
      values below, combined together but
      are always processed in this
      order:

      1. manager
      2. owner
      3. securityOfficer

      Any rejected items from
      previous approvals will be omitted from the
      next phase of
      approvers.

      none - disabled approvals

      owner - the object owner gets
      the approval
      For Role approvals this is the Role object owner. When
      dealing
      with things like Unlock and other account level changes
      the
      approvals will be assigned to the the application owner.

      manager -
      The manager will get all approvals

      securityOfficer - The identity
      named security the security in the variable
      securityOfficerName.</Description>
  </Variable>
  <Variable initializer="string:serial" input="true" name="approvalMode">
    <Description>A string that specifies how we should handle the
      approvals.

      By default this is serial since most of these request
      with
      the exception of manager transfers will have only one
      approver.

      parallel
      Approvals are processed concurrently and there
      must be consensus,
      we wait for all approvers to approve. The first
      approver that
      rejects terminates the entire approval.

      parallelPoll
      Approvals are processed concurrently but consensus is not
      required.
      All approvals will be process, we don't stop if there any
      rejections.

      serial
      Approvals are processed one at a time and there
      must be consensus.
      The first approver that rejects terminates the
      entire approval.

      serialPoll
      Approvals are processed in order but
      consensus is not required.
      All approvals will be processed, we
      don't stop if there are any
      rejections. In effect we are "taking a
      poll" of the approvers.

      any
      Approvals are processed concurrently,
      the first approver to
      respond makes the decision for the group.</Description>
  </Variable>
  <Variable input="true" name="fallbackApprover" required="true">
    <Description>A String that specifies the name of the Identity that
      will
      be assigned any approvals where the owner of the approver
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.</Description>
  </Variable>
  <Variable input="true" name="securityOfficerName">
    <Description>The name of the identity that will be sent approvals
      during security officer approvals.</Description>
  </Variable>
  <Variable input="true" name="batchRequestApprover">
    <Description>Identity responsible for approving batch requests.</Description>
  </Variable>
  <Variable initializer="string:false" input="true"
    name="includeRejectedItemsInApprovalChain">
    <Description>When using multi approvalSchemes a flag to indicate if
      new
      approvals in the chain will include rejected items.</Description>
  </Variable>
  <Variable input="true" name="policyViolations">
    <Description>List of policy violations that were found during our
      initial policy scan.
      This list is passed into each work item so the
      approvers can see
      pending violations.</Description>
  </Variable>
  <Variable input="true" name="flow">
    <Description>The name of the LCM flow that launched this workflow.

      This is one of these values:

      AccountsRequest
      EntitlementsRequest
      RolesRequest
      IdentityCreateRequest
      IdentityEditRequest
      ForgotPassword
      ExpiredPassword
      PasswordRequest</Description>
  </Variable>
  <Variable input="true" name="trace">
    <Description>Used for debugging this subprocess and when set to true
      trace
      statements will be sent to stdout.</Description>
  </Variable>
  <Variable input="true" name="approvalSet" output="true"
    type="sailpoint.object.ApprovalSet">
    <Description>This attributes is set during the "Build Approval Set"
      step,
      which builds this list by going through the ProvisioningPlan
      to build the line items that need to be approved,

      This variable
      includes all ApprovalItems that are part of
      the request process and
      is updated during the AfterScript
      of the approval process by
      assimilating the decisions
      and comments from the Approvals copy of
      the ApprovalItem.</Description>
  </Variable>
  <Variable initializer="string:LCM Identity Update Approval"
    input="true" name="managerEmailTemplate">
    <Description>Name of the email template to use when manager of
      pending
      approvals.</Description>
  </Variable>
  <Variable initializer="string:LCM Identity Update Approval"
    input="true" name="ownerEmailTemplate">
    <Description>Name of the email template to use when notifying the
      owner of pending approvals.</Description>
  </Variable>
  <Variable initializer="string:LCM Identity Update Approval"
    input="true" name="securityOfficerEmailTemplate">
    <Description>Name of the email template to use when notifying the
      security officer of pending approvals.</Description>
  </Variable>
  <Variable initializer="string:Batch Approval" input="true"
    name="batchApproverEmailTemplate">
    <Description>Name of the email template to use when notifying the
      batch approver of pending approval.</Description>
  </Variable>
  <Variable input="true" name="workItemComments">
    <Description>List of global workflow comments to be appended to the
      approval workitem.</Description>
  </Variable>
  <Variable input="true" name="managerElectronicSignature">
    <Description>The name of the electronic signature object that should
      be used when workitems
      are completed by a manager.</Description>
  </Variable>
  <Variable input="true" name="ownerElectronicSignature">
    <Description>The name of the electronic signature object that should
      be used when workitems
      are completed by object owners.</Description>
  </Variable>
  <Variable input="true" name="securityOfficerElectronicSignature">
    <Description>The name of the electronic signature object that should
      be used when workitems
      are completed by the security officer.</Description>
  </Variable>
  <Variable input="true" name="batchApproverElectronicSignature">
    <Description>The name of the electronic signature object that should
      be used when workitems
      are completed by the batch approver when
      performing batch operations.</Description>
  </Variable>
  <Variable input="true" name="priority">
    <Description>String version of WorkItem.level that will be used
      to
      set the priority of the workitems generated
      as part of any
      generated approvals.</Description>
  </Variable>
  <Variable name="tmpApprovalSet" type="sailpoint.object.ApprovalSet">
    <Description>Temporary and transient ApprovalSet used to hold
      filtered
      approval sets as we transition through the approval chain.</Description>
  </Variable>
  <Variable name="tmpApproval">
    <Description>Temporary and transient list of Approval object used to
      hold filtered
      approval as we transition through the approval chain.</Description>
  </Variable>
  <Variable initializer="ref:plan" input="true" name="plan" />
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Approval Library" />
    <Reference class="sailpoint.object.Rule" name="LCM Workflow Library" />
  </RuleLibraries>
  <Step icon="Start" name="Start">
    <Transition to="Manager ApprovalSet" />
  </Step>
  <Step icon="Task" name="Manager ApprovalSet" posX="130" posY="20"
    resultVariable="tmpApprovalSet">
    <Script>
      <Source><![CDATA[
import sailpoint.object.WorkItem.State;
ApprovalSet tmpApprovalSet = new ApprovalSet();
List approvalitems = approvalSet.getItems();
if (approvalitems!=null)
{
    for (ApprovalItem approvalitem : approvalitems)
    {
        if (approvalitem.getState()!=WorkItem.State.Rejected)
        {
            String appname = approvalitem.getApplicationName();
            boolean bDone = false;
            if (appname!=null)
            {
                if (!appname.equals("IdentityIQ"))
                { //Process Entitlement
                    Application app = context.getObjectByName(Application.class,appname);
                    if (app!=null)
                    {
                        if (app.getAttributeValue("managerApproval")!=null)
                        {
                            if (app.getAttributeValue("managerApproval"))
                            {
                                tmpApprovalSet.add(approvalitem); bDone = true;
                            }
                        }
                        if (!bDone)
                        { //There is only one manager, so only check the Entitlement Manager attribute if the App Manager attribute isn't checked
                            List entnames = new ArrayList();
                            if (approvalitem.getDisplayableValue() instanceof String) {entnames.add(approvalitem.getDisplayableValue());} else {entnames = approvalitem.getDisplayableValue();}
                            if (entnames!=null)
                            {
                                for (String entname : entnames)
                                {
                                    entname = entname.substring(1,entname.length()-1);  //Remove the stupid brackets
                                    String key = approvalitem.getName();
                                    ManagedAttribute ent = ManagedAttributer.get(context, app, false, key, entname);
                                    if(ent!=null)
                                    {
                                        if (ent.getAttribute("managerApproval")!=null)
                                        {
                                            if (ent.getAttribute("managerApproval") instanceof String)
                                            { //Sometimes the boolean attribute is a String - don't ask, I have no idea why!  It has to do with exporting/importing the Entitlement Catalog.
                                                if (((ent.getAttribute("managerApproval")).toLowerCase()).equals("true"))
                                                {
                                                    tmpApprovalSet.add(approvalitem);
                                                }
                                            }
                                            else
                                            {
                                                if (ent.getAttribute("managerApproval"))
                                                {
                                                    tmpApprovalSet.add(approvalitem);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                { //Process Role
                    List rolenames = approvalitem.getValue();
                    if (rolenames!=null)
                    {
                        for (String rolename : rolenames)
                        {
                            Bundle bRole = context.getObjectByName(Bundle.class,rolename);
                            if (bRole!=null)
                            {
                                if (bRole.getAttribute("managerApproval")!=null)
                                {
                                    if (bRole.getAttribute("managerApproval"))
                                    {
                                        tmpApprovalSet.add(approvalitem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
return tmpApprovalSet;
      ]]></Source>
    </Script>
    <Transition to="Manager Approval" />
  </Step>
  <Step condition="return !tmpApprovalSet.isEmpty();" icon="Approval"
    name="Manager Approval" posX="253" posY="24">
    <Approval mode="string:serial" name="Manager Approval"
      owner="call:buildManagerApproval" renderer="lcmWorkItemRenderer.xhtml"
      send="identityDisplayName,identityName,policyViolations">
      <AfterScript>
        <Source><![CDATA[
import sailpoint.workflow.IdentityRequestLibrary;
assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,approvalSet);
auditDecisions(item);
        ]]></Source>
      </AfterScript>
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId" />
      <Arg name="workItemElectronicSignature" value="ref:managerElectronicSignature" />
      <Arg name="workItemRequester" value="string:$(launcher)" />
      <Arg name="workItemDescription"
        value="string:Manager Approval for: $(identityDisplayName)" />
      <Arg name="workItemNotificationTemplate" value="ref:managerEmailTemplate" />
      <Arg name="workItemTargetClass" value="string:sailpoint.object.Identity" />
      <Arg name="workItemTargetName" value="string:$(identityName)" />
      <Arg name="workItemTargetId" value="string:$(identityId)" />
      <Arg name="workItemPriority" value="ref:priority" />
      <Arg name="approvalSet" value="ref:tmpApprovalSet" />
    </Approval>
    <Transition to="Owner ApprovalSet" />
  </Step>
  <Step icon="Task" name="Owner ApprovalSet" posX="372" posY="23"
    resultVariable="tmpApprovalSet">
    <Script>
      <Source><![CDATA[
ApprovalSet tmpApprovalSet = new ApprovalSet();
List approvalitems = approvalSet.getItems();
if (approvalitems!=null)
{
    for (ApprovalItem approvalitem : approvalitems)
    {
        if (approvalitem.getState()!=WorkItem.State.Rejected)
        {
            String appname = approvalitem.getApplicationName();
            boolean bDone = false;
            if (appname!=null)
            {
                if (!appname.equals("IdentityIQ"))
                { //Process Application Owner approvals
                    Application app = context.getObjectByName(Application.class,appname);
                    if (app!=null)
                    {
                        if (app.getAttributeValue("ownerApproval")!=null)
                        {
                            if (app.getAttributeValue("ownerApproval"))
                            {
                                tmpApprovalSet.add(approvalitem); bDone = true;
                            }
                        }
                        if (!bDone)
                        {
                            List entnames = new ArrayList();
                            if (approvalitem.getDisplayableValue() instanceof String) {entnames.add(approvalitem.getDisplayableValue());} else {entnames = approvalitem.getDisplayableValue();}
                            if (entnames!=null)
                            {
                                for (String entname : entnames)
                                {
                                    entname = entname.substring(1,entname.length()-1);  //Remove the stupid brackets
                                    String key = approvalitem.getName();
                                    ManagedAttribute ent = ManagedAttributer.get(context, app, false, key, entname);
                                    if(ent!=null)
                                    {
                                        if (ent.getAttribute("ownerApproval")!=null)
                                        {
                                            if (ent.getAttribute("ownerApproval") instanceof String)
                                            { //Sometimes the boolean attribute is a String - don't ask, I have no idea why!  It has to do with exporting/importing the Entitlement Catalog.
                                                if (((ent.getAttribute("ownerApproval")).toLowerCase()).equals("true"))
                                                {
                                                    tmpApprovalSet.add(approvalitem);
                                                }
                                            }
                                            else
                                            {
                                                if (ent.getAttribute("ownerApproval"))
                                                {
                                                    tmpApprovalSet.add(approvalitem);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                { //Process Role Owner approvals
                    List rolenames = approvalitem.getValue();
                    if (rolenames!=null)
                    {
                        for (String rolename : rolenames)
                        {
                            Bundle bRole = context.getObjectByName(Bundle.class,rolename);
                            if (bRole!=null)
                            {
                                if (bRole.getAttribute("ownerApproval")!=null)
                                {
                                    if (bRole.getAttribute("ownerApproval"))
                                    {
                                        tmpApprovalSet.add(approvalitem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
return tmpApprovalSet;
      ]]></Source>
    </Script>
    <Transition to="Owner Approval" />
  </Step>
  <Step condition="return !tmpApprovalSet.isEmpty();" icon="Approval"
    name="Owner Approval" posX="494" posY="22">
    <Approval mode="ref:approvalMode" name="Owner Approval"
      owner="rule:LCM Build Owner Approvals" renderer="lcmWorkItemRenderer.xhtml"
      send="identityDisplayName,identityName,policyViolations">
      <AfterScript>
        <Source><![CDATA[
import sailpoint.workflow.IdentityRequestLibrary;
assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,approvalSet);
auditDecisions(item);
        ]]></Source>
      </AfterScript>
      <Arg name="approvalSet" value="ref:tmpApprovalSet" />
      <Arg name="workItemDescription" value="string:Owner Approval for: $(identityDisplayName)" />
      <Arg name="workItemElectronicSignature" value="ref:ownerElectronicSignature" />
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId" />
      <Arg name="workItemNotificationTemplate" value="ref:ownerEmailTemplate" />
      <Arg name="workItemPriority" value="ref:priority" />
      <Arg name="workItemRequester" value="string:$(launcher)" />
    </Approval>
    <Transition to="Addl ApprovalSet" />
  </Step>
  <Step icon="Task" name="Addl ApprovalSet" posX="618" posY="24"
    resultVariable="tmpApprovalSet">
    <Script>
      <Source><![CDATA[
ApprovalSet tmpApprovalSet = new ApprovalSet();
List approvalitems = approvalSet.getItems();
if (approvalitems!=null)
{
    for (ApprovalItem approvalitem : approvalitems)
    {
        if (approvalitem.getState()!=WorkItem.State.Rejected)
        {
            String appname = approvalitem.getApplicationName();
            if (appname!=null)
            {
                if (!appname.equals("IdentityIQ"))
                { //Process Applications
                    Application app = context.getObjectByName(Application.class,appname);
                    if (app!=null)
                    {
                        String addlApproval = app.getAttributeValue("addlApproval");
                        if (addlApproval!=null)
                        {
                            Identity iApprover = context.getObjectByName(Identity.class,addlApproval);
                            if (iApprover!=null)
                            {
                                approvalitem.setApprover(iApprover.getName());
                                tmpApprovalSet.add(approvalitem);
                            }
                        }
                    }
                }
                else
                { //Process Roles
                    List rolenames = approvalitem.getValue();
                    if (rolenames!=null)
                    {
                        for (String rolename : rolenames)
                        {
                            Bundle bRole = context.getObjectByName(Bundle.class,rolename);
                            if (bRole!=null)
                            {
                                if (bRole.getAttribute("addlApproval")!=null)
                                {
                                    Identity iApprover = context.getObjectByName(Identity.class,bRole.getAttribute("addlApproval"));
                                    if (iApprover!=null)
                                    {
                                        approvalitem.setApprover(iApprover.getName());
                                        tmpApprovalSet.add(approvalitem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
return tmpApprovalSet;
      ]]></Source>
    </Script>
    <Transition to="Addl Approval" />
  </Step>
  <Step condition="script:return !tmpApprovalSet.isEmpty();" icon="Approval"
    name="Addl Approval" posX="741" posY="26" resultVariable="tmpApprovalSet">
    <Approval mode="ref:approvalMode" name="Addl Role Approval"
      owner="rule:LCM Build Owner Approvals" renderer="lcmWorkItemRenderer.xhtml"
      send="identityDisplayName,identityName,policyViolations">
      <AfterScript>
        <Source><![CDATA[
import sailpoint.workflow.IdentityRequestLibrary;
assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,approvalSet);
auditDecisions(item);
        ]]></Source>
      </AfterScript>
      <Arg name="approvalSet" value="ref:tmpApprovalSet" />
      <Arg name="workItemDescription" value="string:Addl Approval for: $(identityDisplayName)" />
      <Arg name="workItemElectronicSignature" value="ref:ownerElectronicSignature" />
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId" />
      <Arg name="workItemNotificationTemplate" value="ref:ownerEmailTemplate" />
      <Arg name="workItemPriority" value="ref:priority" />
      <Arg name="workItemRequester" value="string:$(launcher)" />
      <OwnerScript>
        <Source><![CDATA[
List approvals = new ArrayList();
List approvalItems = approvalSet.getItems();
List approverItems = approvalSet.getItems();
Map approvalMap = new HashMap();
if (approvalSet!=null)
{
    for (ApprovalItem approverItem : approverItems)
    {
        String approver = approverItem.getApprover();
        if (approvalMap.get(approver)==null)
        {
            ApprovalSet tmpApprovalItems = new ApprovalSet();
            for (ApprovalItem approvalItem : approvalItems)
            {
                if ((approvalItem.getApprover()).equals(approver))
                {
                    tmpApprovalItems.add(approvalItem);
                }
            }
            approvalMap.put(approver,tmpApprovalItems);
        }
    }
}
if (approvalMap!=null)
{
    approvals = buildApprovalsFromMap(approvalMap, identityName, launcher);
}
return approvals;
        ]]></Source>
      </OwnerScript>
    </Approval>
    <Transition to="Addl Ent ApprovalSet" />
  </Step>
  <Step icon="Task" name="Addl Ent ApprovalSet" posX="120" posY="201"
    resultVariable="tmpApprovalSet">
    <Script>
      <Source><![CDATA[
ApprovalSet tmpApprovalSet = new ApprovalSet();
List approvalitems = approvalSet.getItems();
if (approvalitems!=null)
{
    for (ApprovalItem approvalitem : approvalitems)
    {
        if (approvalitem.getState()!=WorkItem.State.Rejected)
        {
            String appname = approvalitem.getApplicationName();
            if (appname!=null)
            {
                if (!appname.equals("IdentityIQ"))
                { //Process Entitlements
                    Application app = context.getObjectByName(Application.class,appname);
                    if (app!=null)
                    {
                        List entnames = new ArrayList();
                        if (approvalitem.getDisplayableValue() instanceof String) {entnames.add(approvalitem.getDisplayableValue());} else {entnames = approvalitem.getDisplayableValue();}
                        if (entnames!=null)
                        {
                            for (String entname : entnames)
                            {
                                entname = entname.substring(1,entname.length()-1);
                                String key = approvalitem.getName();
                                ManagedAttribute ent = ManagedAttributer.get(context, app, false, key, entname);
                                if(ent!=null)
                                {
                                    addlApproval = ent.getAttribute("addlApproval");
                                    if (addlApproval!=null)
                                    {
                                        Identity iApprover = context.getObjectById(Identity.class,addlApproval);
                                        if (iApprover!=null)
                                        {
                                            approvalitem.setApprover(iApprover.getName());
                                            tmpApprovalSet.add(approvalitem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
return tmpApprovalSet;
      ]]></Source>
    </Script>
    <Transition to="Addl Ent Approval" />
  </Step>
  <Step condition="script:return !tmpApprovalSet.isEmpty();" icon="Approval"
    name="Addl Ent Approval" posX="279" posY="221" resultVariable="tmpApprovalSet">
    <Approval mode="ref:approvalMode" name="Addl Role Approval"
      owner="rule:LCM Build Owner Approvals" renderer="lcmWorkItemRenderer.xhtml"
      send="identityDisplayName,identityName,policyViolations">
      <AfterScript>
        <Source><![CDATA[
import sailpoint.workflow.IdentityRequestLibrary;
assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,approvalSet);
auditDecisions(item);
        ]]></Source>
      </AfterScript>
      <Arg name="approvalSet" value="ref:tmpApprovalSet" />
      <Arg name="workItemDescription" value="string:Addl Approval for: $(identityDisplayName)" />
      <Arg name="workItemElectronicSignature" value="ref:ownerElectronicSignature" />
      <Arg name="workItemIdentityRequestId" value="ref:identityRequestId" />
      <Arg name="workItemNotificationTemplate" value="ref:ownerEmailTemplate" />
      <Arg name="workItemPriority" value="ref:priority" />
      <Arg name="workItemRequester" value="string:$(launcher)" />
      <OwnerScript>
        <Source><![CDATA[
List approvals = new ArrayList();
List approvalItems = approvalSet.getItems();
List approverItems = approvalSet.getItems();
Map approvalMap = new HashMap();
if (approvalSet!=null)
{
    for (ApprovalItem approverItem : approverItems)
    {
        String approver = approverItem.getApprover();
        if (approvalMap.get(approver)==null)
        {
            ApprovalSet tmpApprovalItems = new ApprovalSet();
            for (ApprovalItem approvalItem : approvalItems)
            {
                if ((approvalItem.getApprover()).equals(approver))
                {
                    tmpApprovalItems.add(approvalItem);
                }
            }
            approvalMap.put(approver,tmpApprovalItems);
        }
    }
}
if (approvalMap!=null)
{
    approvals = buildApprovalsFromMap(approvalMap, identityName, launcher);
}
return approvals;
        ]]></Source>
      </OwnerScript>
    </Approval>
    <Transition to="NoApproval ApprovalSet" />
  </Step>
  <Step icon="Task" name="NoApproval ApprovalSet" posX="400" posY="230"
    resultVariable="tmpApprovalSet">
    <Script>
      <Source><![CDATA[
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Workflow.ApprovalsWithMetadata.NoApprovalApprovalSet");
ApprovalSet tmpApprovalSet = new ApprovalSet();
try
{
    List approvalitems = approvalSet.getItems();
    if (approvalitems!=null)
    {
        for (ApprovalItem approvalitem : approvalitems)
        {
            if (approvalitem.getState()==null) {tmpApprovalSet.add(approvalitem);}
        }
    }
}
catch (Exception e)
{
    serilog.debug("ERROR: "+e+"\nNoApproval ApprovalSet:\n"+approvalSet.toXml());
}
return tmpApprovalSet;
      ]]></Source>
    </Script>
    <Transition to="NoApproval Required" />
  </Step>
  <Step condition="script:return !tmpApprovalSet.isEmpty();" icon="Approval"
    name="NoApproval Required" posX="525" posY="229">
    <Script>
      <Source><![CDATA[
List approvalitems = tmpApprovalSet.getItems();
if (approvalitems!=null)
{
    for (ApprovalItem approvalitem : approvalitems)
    {
        approvalSet.remove(approvalitem);
    }
}
      ]]></Source>
    </Script>
    <Transition to="end" />
  </Step>
  <Step icon="Stop" name="end" posX="647" posY="226" />
</Workflow>
