<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Provisioning Policy Field - Generate Password" type="FieldValue">
  <Source><![CDATA[
import sailpoint.api.PasswordGenerator;
import sailpoint.object.*;
import sailpoint.tools.GeneralException;

System.out.println("Password Generator rule");

// This default password is overridden below.
String password = "P@ssw0rd";

if (null == application) { 
   System.out.println("ERROR: application is null in password generation rule.");
   return password;   // The show must go on, use the default above.    
}

String idName = identity.getName();
String appName = application.getName();

try {
	PasswordGenerator pg = new PasswordGenerator(context);
	String pgPass = pg.generatePassword(identity, application);
	if ( (null != pgPass) && (0 != pgPass.length()) ) {
   	password = pgPass;
	} else {
	  // The show goes on using the default password specified above.
   	  System.out.println("ERROR: Empty password generated for " + idName + " on " + appName);   
	}
} catch (GeneralException ge) {
	System.out.println("Exception generating password for " + idName + " on " + appName + " - returning default");
}
// On production systems this little gem should be commented out.
//System.out.println("Generated Password: " + idName + " on " + appName + " = " + password);

return passwo]]>rd;    
  </Source>
</Rule>
